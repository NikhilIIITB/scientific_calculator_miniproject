pipeline {
    agent any

    environment {
        DOCKER_IMAGE_NAME = 'scientific_calculator'
        GITHUB_REPO_URL = 'https://github.com/NikhilIIITB/scientific_calculator_miniproject.git'
        EMAIL_TO = 'nns972000@gmail.com'
    }



    stages {
        stage('Checkout') {
            steps {
                script {
                    // Checkout the code from the GitHub repository
                    git branch: 'main', url: "${GITHUB_REPO_URL}"
                }
            }
        }

    stage('Maven Compile') {
        steps {
            script {
                // Compile the Java code using Maven
                //sh 'mvn -f scientific_calculator/pom.xml package'
                sh 'mvn -f scientific_calculator/pom.xml clean install -DskipTests'    //DskipTests to skip the test cases while building

            }
        }
    }

    stage('Check TEST cases') {
        steps {
            script {
                sh 'mvn -f scientific_calculator/pom.xml test'
            }
        }
    }



    stage('Build Docker Image') {
        steps {
            script {
                // Build Docker image
                docker.build("${DOCKER_IMAGE_NAME}", '.')
            }
        }
    }

    stage('Push Docker Images') {
        steps {
            script{
                docker.withRegistry('', 'DockerHubCred') {
                sh 'docker tag scientific_calculator nikhiliiitb/scientific_calculator:latest'
                sh 'docker push nikhiliiitb/scientific_calculator'
                }
             }
        }
    }

   stage('Run Ansible Playbook') {
            steps {
                script {
                    ansiblePlaybook(
                        playbook: 'deploy.yml',
                        inventory: 'inventory'
                     )
                }
            }
        }

    }

   post {
        success {
            emailext body: 'Check console output at $BUILD_URL to view the results. \n\n ${CHANGES} \n\n ---------- \n${BUILD_LOG, maxLines=100, escapeHtml=false}', 
                    to: "${EMAIL_TO}", 
                    subject: 'Build succeed in Jenkins: $PROJECT_NAME - #$BUILD_NUMBER'
        }
    
        failure {
            emailext body: 'Check console output at $BUILD_URL to view the results. \n\n ${CHANGES} \n\n ----------\n${BUILD_LOG, maxLines=100, escapeHtml=false}', 
                    to: "${EMAIL_TO}", 
                    subject: 'Build failed in Jenkins: $PROJECT_NAME - #$BUILD_NUMBER'
        }
    
       
    }
}
